import { useState } from "react";
import { useForm } from "react-hook-form";
import z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { createUserApi, getTypeUser } from "../../../services/user.api";

const schema = z.object({
  taiKhoan: z.string().min(1, "Vui l√≤ng nh·∫≠p t√†i kho·∫£n"),
  matKhau: z.string().min(1, "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u"),
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
  soDt: z.string().min(8, "SƒêT kh√¥ng h·ª£p l·ªá"),
  maNhom: z.string().default("GP01"),
  hoTen: z.string().min(1, "Vui l√≤ng nh·∫≠p h·ªç t√™n"),
  maLoaiNguoiDung: z.string().min(1, "Vui l√≤ng ch·ªçn lo·∫°i ng∆∞·ªùi d√πng"),
});

export default function AddUser() {
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);

  const { register, handleSubmit, formState } = useForm({
    defaultValues: {
      taiKhoan: "",
      matKhau: "",
      email: "",
      soDt: "",
      maNhom: "GP01",
      hoTen: "",
      maLoaiNguoiDung: "",
    },
    resolver: zodResolver(schema),
  });
  const { errors } = formState;

  const { mutate, isPending } = useMutation({
    mutationFn: createUserApi, // ph·∫£i nh·∫≠n FormData; n·∫øu API c·∫ßn JSON th√¨ g·ª≠i th·∫≥ng "values"
    onSuccess: () => {
      alert("T·∫°o th√†nh c√¥ng!");
      navigate("/admin/user-management");
    },
    onError: (error) => {
      const res = error?.response?.data;
      if (res?.content) {
        alert(res.content); // üëâ show "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!"
      } else {
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
      }
    },
  });

  const { data: type = [] } = useQuery({
    queryKey: ["type-user"],
    queryFn: getTypeUser,
  });

  const onSubmit = (values) => {
    // ki·ªÉm tra nhanh
    console.log("payload JSON g·ª≠i ƒëi:", values);
    mutate(values);
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-semibold text-gray-900">
        Th√™m t√†i kho·∫£n ng∆∞·ªùi d√πng
      </h1>

      <form
        onSubmit={handleSubmit(onSubmit)}
        className="space-y-5 max-w-2xl mx-auto"
      >
        {/* T√†i kho·∫£n */}
        <div className="flex items-center gap-4">
          <label
            htmlFor="taiKhoan"
            className="w-32 text-sm font-medium text-gray-700"
          >
            T√†i kho·∫£n
          </label>
          <div>
            <input
              type="text"
              id="taiKhoan"
              placeholder="Nh·∫≠p t√†i kho·∫£n"
              className="w-96 rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
              {...register("taiKhoan")}
            />
            {errors.taiKhoan && (
              <p className="text-red-600 text-xs mt-1">
                {errors.taiKhoan.message}
              </p>
            )}
          </div>
        </div>

        {/* M·∫≠t kh·∫©u */}
        <div className="flex items-center gap-4">
      <label
        htmlFor="matKhau"
        className="w-32 text-sm font-medium text-gray-700"
      >
        M·∫≠t kh·∫©u
      </label>
      <div className="relative w-96">
        <input
          type={showPassword ? "text" : "password"}
          id="matKhau"
          placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
          className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 pr-10 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
          {...register("matKhau")}
        />
        {/* N√∫t hi·ªÉn th·ªã ·∫©n/hi·ªán */}
        <button
          type="button"
          onClick={() => setShowPassword(!showPassword)}
          className="absolute inset-y-0 right-2 flex items-center text-gray-500 hover:text-gray-700"
        >
          {showPassword ? "üôà" : "üëÅÔ∏è"}
        </button>

        {errors.matKhau && (
          <p className="text-red-600 text-xs mt-1">{errors.matKhau.message}</p>
        )}
      </div>
    </div>

        {/* H·ªç t√™n */}
        <div className="flex items-center gap-4">
          <label
            htmlFor="hoTen"
            className="w-32 text-sm font-medium text-gray-700"
          >
            H·ªç t√™n
          </label>
          <div>
            <input
              type="text"
              id="hoTen"
              placeholder="Nh·∫≠p h·ªç t√™n"
              className="w-96 rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
              {...register("hoTen")}
            />
            {errors.hoTen && (
              <p className="text-red-600 text-xs mt-1">
                {errors.hoTen.message}
              </p>
            )}
          </div>
        </div>

        {/* Email */}
        <div className="flex items-center gap-4">
          <label
            htmlFor="email"
            className="w-32 text-sm font-medium text-gray-700"
          >
            Email
          </label>
          <div>
            <input
              type="text"
              id="email"
              placeholder="Nh·∫≠p email"
              className="w-96 rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
              {...register("email")}
            />
            {errors.email && (
              <p className="text-red-600 text-xs mt-1">
                {errors.email.message}
              </p>
            )}
          </div>
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i */}
        <div className="flex items-center gap-4">
          <label
            htmlFor="soDt"
            className="w-32 text-sm font-medium text-gray-700"
          >
            S·ªë ƒëi·ªán tho·∫°i
          </label>
          <div>
            <input
              type="text"
              id="soDt"
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              className="w-96 rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
              {...register("soDt")}
            />
            {errors.soDt && (
              <p className="text-red-600 text-xs mt-1">{errors.soDt.message}</p>
            )}
          </div>
        </div>

        {/* Lo·∫°i ng∆∞·ªùi d√πng */}
        <div className="flex items-center gap-4">
          <label
            htmlFor="maLoaiNguoiDung"
            className="w-32 text-sm font-medium text-gray-700"
          >
            Lo·∫°i ng∆∞·ªùi d√πng
          </label>
          <div>
            <select
              id="maLoaiNguoiDung"
              className="w-96 rounded-lg border border-gray-300 bg-white p-2.5 text-sm"
              {...register("maLoaiNguoiDung")}
            >
              <option value="">‚Äî Ch·ªçn lo·∫°i ng∆∞·ªùi d√πng ‚Äî</option>
              {type.map((t) => (
                <option key={t.maLoaiNguoiDung} value={t.maLoaiNguoiDung}>
                  {t.tenLoai}
                </option>
              ))}
            </select>
            {errors.maLoaiNguoiDung && (
              <p className="text-red-600 text-xs mt-1">
                {errors.maLoaiNguoiDung.message}
              </p>
            )}
          </div>
        </div>

        {/* Submit */}
        <div className="flex justify-center pt-4">
          <button
            type="submit"
            disabled={isPending}
            className="px-5 py-2.5 rounded-lg bg-blue-600 text-white text-sm font-medium hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 disabled:opacity-50"
          >
            {isPending ? "ƒêang l∆∞u..." : "Submit"}
          </button>
        </div>
      </form>
    </div>
  );
}
